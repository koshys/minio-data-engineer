version: '3.8'

networks:
  data-pipeline-network:
    name: data-pipeline-network

services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - data-pipeline-network

  # Kafka broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    ports:
      - "29092:29092"
    networks:
      - data-pipeline-network

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - data-pipeline-network

  # MinIO (S3-compatible storage)
  # minio:
  #   image: quay.io/minio/aistor/minio #minio/minio
  #   hostname: minio
  #   container_name: minio
  #   ports:
  #     - "9090:9000"
  #     - "9091:9001"
  #   environment:
  #     MINIO_ROOT_USER: minioadmin
  #     MINIO_ROOT_PASSWORD: minioadmin
  #     MINIO_PROMETHEUS_AUTH_TYPE: public
  #   command: server /data --console-address ":9001" --license /etc/minio/minio.license
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
  #     interval: 30s
  #     timeout: 20s
  #     retries: 3
  #   volumes:
  #     - minio-data:/data
  #     - ./license:/etc/minio/minio.license
  #   networks:
  #     - data-pipeline-network

  # # MinIO setup (create buckets)
  # minio-setup:
  #   image: quay.io/minio/aistor/mc #minio/mc
  #   depends_on:
  #     - minio
  #   entrypoint: >
  #     /bin/sh -c "
  #     sleep 5;
  #     /usr/bin/mc alias set local http://minio:9000 minioadmin minioadmin;
  #     /usr/bin/mc mb --ignore-existing local/warehouse;
  #     /usr/bin/mc policy set public local/warehouse;
  #     /usr/bin/mc version enable local/warehouse;
  #     exit 0;
  #     "
  #   networks:
  #     - data-pipeline-network  
  minio:
    image: quay.io/minio/minio
    hostname: minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9091:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_PROMETHEUS_AUTH_TYPE: public
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    volumes:
      - minio-data:/data
    networks:
      - data-pipeline-network

  # MinIO setup (create buckets)
  minio-setup:
    image: quay.io/minio/aistor/mc #minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc alias set local http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb --ignore-existing local/warehouse;
      /usr/bin/mc policy set public local/warehouse;
      /usr/bin/mc version enable local/warehouse;
      exit 0;
      "
    networks:
      - data-pipeline-network

  # Data Pipeline Application
  data-pipeline:
    image: eclipse-temurin:17-jre-alpine
    container_name: data-pipeline
    depends_on:
      - kafka
      - minio
    ports:
      - "9999:9999"  # JMX port
    networks:
      - data-pipeline-network
    volumes:
      - ./target/local-data-pipeline-fat-1.0-SNAPSHOT.jar:/app/local-data-pipeline.jar
      - ./src/main/resources/log4j2.xml:/app/log4j2.xml
    environment:
      - DOCKER_DEPLOYMENT=true
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - LOG_LEVEL=INFO
      - JMX_PORT=9999
      - JMX_HOSTNAME=0.0.0.0
      - JAVA_OPTS=-Xmx10g -Dhadoop.home.dir=/tmp -Dio.netty.tryReflectionSetAccessible=true -Dlog4j2.configurationFile=/app/log4j2.xml -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.rmi.port=9999 -Dcom.sun.management.jmxremote.host=0.0.0.0 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false
    command: >
      java -Xmx1g --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED
      -Dio.netty.tryReflectionSetAccessible=true 
      -Dhadoop.home.dir=/tmp
      -Dlog4j2.configurationFile=/app/log4j2.xml
      -Dcom.sun.management.jmxremote
      -Dcom.sun.management.jmxremote.port=9999
      -Dcom.sun.management.jmxremote.rmi.port=9999
      -Dcom.sun.management.jmxremote.host=0.0.0.0
      -Dcom.sun.management.jmxremote.authenticate=false
      -Dcom.sun.management.jmxremote.ssl=false
      -jar /app/local-data-pipeline.jar all

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    depends_on:
      - data-pipeline
    ports:
      - "9070:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - data-pipeline-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./minio-dashboard.json:/var/lib/grafana/dashboards/minio-dashboard.json
      - ./minio-node-dashboard.json:/var/lib/grafana/dashboards/minio-node-dashboard.json
      - ./minio-bucket-dashboard.json:/var/lib/grafana/dashboards/minio-bucket-dashboard.json
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - data-pipeline-network

volumes:
  minio-data:
  grafana-storage: 
